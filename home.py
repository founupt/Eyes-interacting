import tkinter as tk
from PIL import Image, ImageTk
import cv2
import sys
import subprocess

user_name = sys.argv[1] if len(sys.argv) > 1 else "User"

root = tk.Tk()
root.title("Camera Interface")
root.geometry("900x600")
root.configure(bg='#1E2440')

# Khung ƒë·ªÉ hi·ªÉn th·ªã camera
camera_frame = tk.Label(root)
camera_frame.place(x=20, y=100, width=600, height=400)

# Khung ƒëi·ªÅu khi·ªÉn b√™n ph·∫£i
side_frame = tk.Frame(root, bg='#1E2440')
side_frame.place(x=650, y=100)

user_icon = tk.Label(side_frame, text="üë§", font=("Helvetica", 32), bg='#1E2440', fg='white')
user_icon.pack(pady=10)

user_name_label = tk.Label(side_frame, text=f"Hi, {user_name}", font=("Helvetica", 12), bg='#1E2440', fg='white')
user_name_label.pack(pady=10)

# C√°c n√∫t ƒëi·ªÅu khi·ªÉn
up_button = tk.Button(side_frame, text="‚¨Ü", font=("Helvetica", 24), bg='#1E2440', fg='white', width=4)
up_button.pack(pady=10)

down_button = tk.Button(side_frame, text="‚¨á", font=("Helvetica", 24), bg='#1E2440', fg='white', width=4)
down_button.pack(pady=10)

keyboard_button = tk.Button(side_frame, text="‚å®", font=("Helvetica", 24), bg='#1E2440', fg='white', width=4)
keyboard_button.pack(pady=10)

# N√∫t Start Tracking (kh·ªüi ch·∫°y camera tracking)
def start_tracking():
    """H√†m kh·ªüi ch·∫°y m√£ x·ª≠ l√Ω camera."""
    subprocess.Popen(['python', 'camera_tracking.py'])  # Gi·∫£ s·ª≠ b·∫°n l∆∞u ph·∫ßn m√£ camera trong camera_tracking.py

start_button = tk.Button(side_frame, text="Start Tracking", font=("Helvetica", 16), bg='#1E2440', fg='white', command=start_tracking)
start_button.pack(pady=10)

# N√∫t Stop Tracking (d·ª´ng camera tracking)
def stop_tracking():
    """H√†m ƒë·ªÉ d·ª´ng m√£ x·ª≠ l√Ω camera."""
    subprocess.Popen(['pkill', '-f', 'camera_tracking.py'])  # D·ª´ng qu√° tr√¨nh camera b·∫±ng l·ªánh pkill (ch·ªâ ho·∫°t ƒë·ªông tr√™n Unix)

stop_button = tk.Button(side_frame, text="Stop Tracking", font=("Helvetica", 16), bg='#1E2440', fg='white', command=stop_tracking)
stop_button.pack(pady=10)

# Hi·ªÉn th·ªã camera (live feed)
cap = cv2.VideoCapture(0)

def update_camera():
    ret, frame = cap.read()
    if ret:
        cv2image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        img = Image.fromarray(cv2image)
        imgtk = ImageTk.PhotoImage(image=img)
        camera_frame.imgtk = imgtk
        camera_frame.configure(image=imgtk)
    camera_frame.after(10, update_camera)  # C·∫≠p nh·∫≠t h√¨nh ·∫£nh sau m·ªói 10ms

update_camera()

root.mainloop()

cap.release()
cv2.destroyAllWindows()
